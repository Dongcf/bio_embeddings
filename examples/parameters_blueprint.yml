# global options must be defined

global:
  # Required: Path to a Fasta file
  sequences_file: /path/to/sequences.fasta
  # Required: String for output
  prefix: my_embeddings

  ## Optional: file manager
  # file_manager: [*filesystem]

  ## Optional: remap index simple (not via md5, this is not encouraged)
  # simple_remapping: [True, *False]

  ## Stages are executed in sequential order as they are outlined in this file.
  ## Stage names must be different!! If not: they will overwrite each_other
  ## The same stage type (e.g. embed,..) can be executed multiple types.
  ## Dependencies for a stage are defined in the dependencies parameter

  ## This config file includes options for initializing classes and options specific to the protocol

  ## Options notation:
  ## *: denotes the default option
  ## @: denotes that the file or directory will be downloaded and stored locally if not provided

stage_1:
  type: embed
  # Required: which embedder to use
  # Options: seqvec, albert, bert, xlnet
  protocol: seqvec

  # Optional: reduce embeddings to fixed size, per-protein. Comment out if not needed.
  reduce: True

  # Optional: discard per amino acid embeddings.
  # Setting this parameter to True will disable storing full size embeddings (per amino acid).
  # This parameter only works in combination with "reduce: True"
  # discard_per_amino_acid_embeddings: [True, *False]

  #### Optional parameters to instantiate classes

  ### Optional for protocol: seqvec
  # weights_file: @/path/to/file
  # options_file: @/path/to/file
  ## The following parameter sets an upper bound on total AA to include when embedding many sequences.
  ## Adjust this parameter if CUDA runs out of memory! The default (15.000) works for a 1080 with 8GB RAM.
  # max_amino_acids: [*15000]
  ## The following parameters sets the amount of AA to include in a batch before writing to disk.

  ### Optional for protocol: fasttext, word2vec, glove
  # model_file: @/path/to/file

  ### Optional for protocol: albert, bert, xlnet
  # model_directory: @/path/to/directory

  ### Optional for protocol: seqvec, albert, bert, xlnet
  ## Set the following parameter to True to use CPU instead of GPU to calculate embeddings
  # use_cpu: [True, *False]

  #### Optional parameters for the execution of the protocol

  ### Optional for protocol: seqvec, albert, bert, xlnet
  ## Set the following parameter to True to use CPU instead of GPU to calculate embeddings
  # use_cpu: [True, *False]

stage_2:
  type: project
  # Required: which projection algorithm to use
  # Options: tsne, umap
  protocol: tsne
  # Either depend on an embedding stage with reduced embeddings
  depends_on: stage_1
  # or define mapping and reduced embedding file:
  # reduced_embeddings_file: path/to/reduced_embeddings_file.h5
  # mapping_file: path/to/mapping_file.csv


  ### Optional for protocol: tsne
  # n_iter: *15000
  # perplexity: *6
  # n_jobs: *-1

  ### Optional for protocol: umap
  # min_dist: *0.6
  # n_neighbors: *15

  ### Optional for protocol: tsne and umap
  # metric: *'cosine'
  # n_components: *3
  # random_state: *420
  # verbose: *1

stage_3:
  type: visualize
  # Required: which graph to render
  # Options: plotly
  protocol: plotly
  # Either depend on a project stage with projected embeddings file
  depends_on: stage_2
  # or define projected embeddings file:
  # projected_embeddings_file: path/to/projected_embeddings_file.csv

  # Optional: csv file with annotations
  # csv must have header: identifier, label
  # annotation_file: path/to/annotation_file.csv

  # Optional: hide proteins for which there is no annotation in the annotation file (only relevant if annotation file is provided)
  # display_unknown: [False, *True]

  # Optional: set to True if in annotation_file identifiers correspond to sequence MD5 hashes
  # if set to False (default), mapping will be performed on original identifiers.
  # Where missing or duplicate, will be ignored
  # merge_via_index: [True, *False]

  # Optional: 2D vs 3D plot
  # n_components: [2,*3]
