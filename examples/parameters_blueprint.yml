# global options must be defined

global:
  # Required: Path to a Fasta file
  sequences_file: /path/to/sequences.fasta
  # Required: String for output
  prefix: my_embeddings

  ## Optional: file manager
  # file_manager: [*filesystem]

## Stages are executed in sequential order as they are outlined in this file.
## Stage names must be different!! If not: they will overwrite each_other
## The same stage type (e.g. embed,..) can be executed multiple types.
## Dependencies for a stage are defined in the dependencies parameter

## This config file includes options for initializing classes and options specific to the protocol

## Options notation:
## *: denotes the default option
## @: denotes that the file or directory will be downloaded and stored locally if not provided

stage_1:
  type: embed
  # Required: which embedder to use
  # Options: seqvec, albert
  protocol: seqvec

  # Optional: reduce embeddings to fixed size, per-protein. Comment out if not needed.
  reduce: True

  #### Optional parameters to instantiate classes

  ### Optional for protocol: seqvec
  # weights_file: @/path/to/file
  # options_file: @/path/to/file
  # vocabulary_file: @/path/to/file (must specify seqvec_version=2)
  # seqvec_version: [*1,2]
  ## The following parameter sets an upper bound on total AA to include when embedding many sequences.
  ## Adjust this parameter if CUDA runs out of memory! The default (15.000) works for a 1080 with 8GB RAM.
  # max_amino_acids: [*15000]
  ## The following parameters sets the amount of AA to include in a batch before writing to disk.

  ### Optional for protocol: transformerxl
  # model: [*base, large]
  # model_file: @/path/to/file
  # vocabulary_file: @/path/to/file

  ### Optional for protocol: fasttext, word2vec, glove
  # model_file: @/path/to/file

  ### Optional for protocol: albert
  # model_directory: @/path/to/directory

  ### Optional for protocol: seqvec, albert
  ## Set the following parameter to True to use CPU instead of GPU to calculate embeddings
  # use_cpu: [True, *False]

  #### Optional parameters for the execution of the protocol

  ### Optional for protocol: seqvec
  ## Adjust this parameter if you run out of RAM! The default (100.000) works for a machine with 64GB RAM.
  # max_amino_acids_RAM: [*100000]

  ### Optional for protocol: seqvec, albert
  ## Set the following parameter to True to use CPU instead of GPU to calculate embeddings
  # use_cpu: [True, *False]

stage_2:
  type: project
  # Required: which projection algorithm to use
  # Options: tsne, umap
  protocol: tsne
  # Either depend on an embedding stage with reduced embeddings
  depends_on: stage_1
  # or define mapping and reduced embedding file:
  # reduced_embeddings_file: path/to/reduced_embeddings_file.h5
  # mapping_file: path/to/mapping_file.csv


  ### Optional for protocol: tsne
  # metric = *'cosine'
  # n_components = *3
  # perplexity = *6
  # random_state = *420
  # n_iter = *15000
  # verbose = *1
  # verbose = *1

stage_3:
  type: visualize
  # Either depend on a project stage with projected embeddings file
  depends_on: stage_2
  # or define projected embeddings file:
  # projected_embeddings_file: path/to/projected_embeddings_file.csv

  # Required: csv file with annotations
  # csv must have header: identifier, label
  annotation_file: path/to/annotation_file.csv

  # Optional: set to True if in annotation_file identifiers correspond to sequence MD5 hashes
  # if set to False (default), mapping will be performed on original identifiers.
  # Where missing or duplicate, will be ignored
  # merge_via_index: [True, *False]

stage_4:
  type: extract_features
  depends_on: stage_1
  ## Optional; inferred from embedder
  # protocol: [seqvec]

  ## Optional for protocol: seqvec
  # secondary_structure_checkpoint_file: @/path/to/file
  # subcellular_location_checkpoint_file: @/path/to/file
