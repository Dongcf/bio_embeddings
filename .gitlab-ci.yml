image: "python:3.7"

#cache:
#  key:
#    files:
#      - poetry.lock
#    prefix: "${CI_JOB_NAME}"
#  paths:
#    - .venv

stages:
  - tests
  - deploy

.install-deps-template: &install-deps
  variables:
    SKIP_T5: 1 # Until we fix that out of disk error
  before_script:
    - pip install --upgrade pip virtualenv
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    - source $HOME/.poetry/env
    - poetry --version
    # Force a recent pip version inside the virtualenv
    - virtualenv .venv
    - .venv/bin/pip install --upgrade pip
    - poetry config virtualenvs.in-project true
    - poetry install -E all

.test-template: &test
  <<: *install-deps
  stage: tests
  coverage: '/TOTAL.*\s(\d+\.\d+\%)/'
  script: poetry run pytest -v

python3.6:
  <<: *test
  image: python:3.6

python3.8:
  <<: *test
  image: python:3.8

docs:
  <<: *install-deps
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "ci-refactor"' # TODO: CHANGE BACK
      when: always
    - if: '$CI_COMMIT_TAG'
      when: always
  script:
    - . .venv/bin/activate
    - cd docs
    - make html
    # https://about.gitlab.com/blog/2017/11/02/automating-boring-git-operations-gitlab-ci/
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
    - git config --global user.name "bio_embeddings"
    - git config --global user.email "support@bioembeddings.com"
    # https://stackoverflow.com/a/29380765/3549270
    - mkdir ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git clone git@github.com:sacdallago/bio_embeddings.git docs-branch
    - cd docs-branch
    - git checkout gh-pages-konsti-testing # TODO: CHANGE ME BACK
    # We want to have separate documentation for every release while updating develop with every commit
    # TODO: Index file with redirect
    - cp -r ../_build/html ${CI_COMMIT_TAG:-develop}
    - git add .
    - git commit --allow-empty -m 'Upload docs'
    - git push

.setup-kaniko-template: &setup-kaniko
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
    - if: '$CI_COMMIT_TAG'
      when: always
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"ghcr.io\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

docker-webserver-develop:
  <<: *setup-kaniko
  stage: deploy
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/webserver/Dockerfile.webserver --destination ghcr.io/bioembeddings/webserver:${CI_COMMIT_TAG:-latest}

docker-worker-develop:
  <<: *setup-kaniko
  stage: deploy
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/webserver/Dockerfile.worker --destination ghcr.io/bioembeddings/worker:${CI_COMMIT_TAG:-latest}

release-to-pypi:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
  image: python:3.8
  script:
    - pip install --upgrade pip virtualenv
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    - source $HOME/.poetry/env
    - poetry --version
    - poetry config repositories.testpypi https://test.pypi.org/legacy/ # TODO: REMOVE
    - poetry publish --build -r testpypi -u __token__ -p $TEST_PYPI_TOKEN # TODO: CHANGE BACK AND SWITCH TOKEN
